//TESTBENCH
module testbench;
  reg [3:0] a, b;           // 4-bit inputs
  wire [7:0] product;       // 8-bit product output

  // Instantiate the DUT (Design Under Test)
  wallace_multiplier DUT (
    .a(a),
    .b(b),
    .product(product)
  );

  initial begin
    $monitor($time, " a=%d, b=%d, product=%d", a, b, product);

   // Test Case 1: 3 x 2 = 6 (Basic Case)
    a = 4'b0011; // 3
    b = 4'b0010; // 2
    #10;

    // Test Case 2: 15 x 15 = 225 (Max 4-bit Multiplication)
    a = 4'b1111; // 15
    b = 4'b1111; // 15
    #10;

    // Test Case 3: 9 x 6 = 54 (Medium Values)
    a = 4'b1001; // 9
    b = 4'b0110; // 6
    #10;

    // Test Case 4: 0 x 0 = 0 (Zero Case)
    a = 4'b0000; // 0
    b = 4'b0000; // 0
    #10;

    // Test Case 5: 1 x 15 = 15 (Multiply by 1)
    a = 4'b0001; // 1
    b = 4'b1111; // 15
    #10;

    // Test Case 6: 15 x 1 = 15 (Reverse of Test Case 5)
    a = 4'b1111; // 15
    b = 4'b0001; // 1
    #10;

    // Test Case 7: 8 x 8 = 64 (Power of 2)
    a = 4'b1000; // 8
    b = 4'b1000; // 8
    #10;

    // Test Case 8: 5 x 10 = 50 (Random Medium Values)
    a = 4'b0101; // 5
    b = 4'b1010; // 10
    #10;

    // Test Case 9: 12 x 3 = 36 (Different Bit Patterns)
    a = 4'b1100; // 12
    b = 4'b0011; // 3
    #10;

    // Test Case 10: 7 x 7 = 49 (Same Medium Values)
    a = 4'b0111; // 7
    b = 4'b0111; // 7
    #10;

    // Test Case 11: 4 x 0 = 0 (Multiply by Zero)
    a = 4'b0100; // 4
    b = 4'b0000; // 0
    #10;

    // Test Case 12: 0 x 10 = 0 (Reverse of Test Case 11)
    a = 4'b0000; // 0
    b = 4'b1010; // 10
    #10;

    // Test Case 13: 6 x 9 = 54 (Same as Test Case 3, but swapped)
    a = 4'b0110; // 6
    b = 4'b1001; // 9
    #10;

    // Test Case 14: 13 x 7 = 91 (Large Odd Numbers)
    a = 4'b1101; // 13
    b = 4'b0111; // 7
    #10;

    // Test Case 15: 14 x 2 = 28 (Large x Small)
    a = 4'b1110; // 14
    b = 4'b0010; // 2
    #10;


    $finish;
  end
endmodule
